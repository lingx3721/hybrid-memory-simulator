/*
 * DO NOT MODIFY
 * This file is atuomatically generated by Marss Builder.
 * If you want to make any changes to this configuration please make
 * changes to '.conf' file which was used to generate this.
 * 
 * conf file:  
 */



#include <globals.h>
#include <ptlsim.h>
#include <memoryHierarchy.h>
#include <memoryRequest.h>
#include <cacheLines.h>

namespace Memory {

#define L2_2M_MESI_TAG_LATENCY 2
#define L2_2M_MESI_LATENCY 5
#define L2_2M_MESI_WRITE_PORTS 1
#define L2_2M_MESI_ASSOC 8
#define L2_2M_MESI_READ_PORTS 1
#define L2_2M_MESI_LINE_SIZE 64
#define L2_2M_MESI_SIZE 2M
#define L2_2M_MESI_SETS 4096

typedef CacheLines<L2_2M_MESI_SETS, L2_2M_MESI_ASSOC, L2_2M_MESI_LINE_SIZE, L2_2M_MESI_LATENCY> L2_2M_MESI_CacheLines;

#define L2_256K_MESI_TAG_LATENCY 2
#define L2_256K_MESI_LATENCY 5
#define L2_256K_MESI_WRITE_PORTS 1
#define L2_256K_MESI_ASSOC 8
#define L2_256K_MESI_READ_PORTS 1
#define L2_256K_MESI_LINE_SIZE 64
#define L2_256K_MESI_SIZE 256K
#define L2_256K_MESI_SETS 512

typedef CacheLines<L2_256K_MESI_SETS, L2_256K_MESI_ASSOC, L2_256K_MESI_LINE_SIZE, L2_256K_MESI_LATENCY> L2_256K_MESI_CacheLines;

#define L2_2M_TAG_LATENCY 2
#define L2_2M_LATENCY 5
#define L2_2M_WRITE_PORTS 1
#define L2_2M_ASSOC 8
#define L2_2M_READ_PORTS 1
#define L2_2M_LINE_SIZE 64
#define L2_2M_SIZE 2M
#define L2_2M_SETS 4096

typedef CacheLines<L2_2M_SETS, L2_2M_ASSOC, L2_2M_LINE_SIZE, L2_2M_LATENCY> L2_2M_CacheLines;

#define L2_2M_WT_TAG_LATENCY 2
#define L2_2M_WT_LATENCY 5
#define L2_2M_WT_WRITE_PORTS 1
#define L2_2M_WT_ASSOC 8
#define L2_2M_WT_READ_PORTS 1
#define L2_2M_WT_LINE_SIZE 64
#define L2_2M_WT_SIZE 2M
#define L2_2M_WT_SETS 4096

typedef CacheLines<L2_2M_WT_SETS, L2_2M_WT_ASSOC, L2_2M_WT_LINE_SIZE, L2_2M_WT_LATENCY> L2_2M_WT_CacheLines;

#define L2_2M_MOESI_TAG_LATENCY 2
#define L2_2M_MOESI_LATENCY 5
#define L2_2M_MOESI_WRITE_PORTS 1
#define L2_2M_MOESI_ASSOC 8
#define L2_2M_MOESI_READ_PORTS 1
#define L2_2M_MOESI_LINE_SIZE 64
#define L2_2M_MOESI_SIZE 2M
#define L2_2M_MOESI_SETS 4096

typedef CacheLines<L2_2M_MOESI_SETS, L2_2M_MOESI_ASSOC, L2_2M_MOESI_LINE_SIZE, L2_2M_MOESI_LATENCY> L2_2M_MOESI_CacheLines;

#define L1_128K_MESI_TAG_LATENCY 2
#define L1_128K_MESI_LATENCY 2
#define L1_128K_MESI_WRITE_PORTS 2
#define L1_128K_MESI_ASSOC 8
#define L1_128K_MESI_READ_PORTS 2
#define L1_128K_MESI_LINE_SIZE 64
#define L1_128K_MESI_SIZE 128K
#define L1_128K_MESI_SETS 256

typedef CacheLines<L1_128K_MESI_SETS, L1_128K_MESI_ASSOC, L1_128K_MESI_LINE_SIZE, L1_128K_MESI_LATENCY> L1_128K_MESI_CacheLines;

#define L1_256K_TAG_LATENCY 2
#define L1_256K_LATENCY 2
#define L1_256K_WRITE_PORTS 2
#define L1_256K_ASSOC 8
#define L1_256K_READ_PORTS 2
#define L1_256K_LINE_SIZE 64
#define L1_256K_SIZE 256K
#define L1_256K_SETS 512

typedef CacheLines<L1_256K_SETS, L1_256K_ASSOC, L1_256K_LINE_SIZE, L1_256K_LATENCY> L1_256K_CacheLines;

#define L3_1M_TAG_LATENCY 2
#define L3_1M_LATENCY 7
#define L3_1M_WRITE_PORTS 1
#define L3_1M_ASSOC 8
#define L3_1M_READ_PORTS 1
#define L3_1M_LINE_SIZE 64
#define L3_1M_SIZE 1M
#define L3_1M_SETS 2048

typedef CacheLines<L3_1M_SETS, L3_1M_ASSOC, L3_1M_LINE_SIZE, L3_1M_LATENCY> L3_1M_CacheLines;

#define L2_1M_MOESI_TAG_LATENCY 2
#define L2_1M_MOESI_LATENCY 5
#define L2_1M_MOESI_WRITE_PORTS 1
#define L2_1M_MOESI_ASSOC 8
#define L2_1M_MOESI_READ_PORTS 1
#define L2_1M_MOESI_LINE_SIZE 64
#define L2_1M_MOESI_SIZE 1M
#define L2_1M_MOESI_SETS 2048

typedef CacheLines<L2_1M_MOESI_SETS, L2_1M_MOESI_ASSOC, L2_1M_MOESI_LINE_SIZE, L2_1M_MOESI_LATENCY> L2_1M_MOESI_CacheLines;

#define L2_512K_MOESI_TAG_LATENCY 2
#define L2_512K_MOESI_LATENCY 5
#define L2_512K_MOESI_WRITE_PORTS 1
#define L2_512K_MOESI_ASSOC 4
#define L2_512K_MOESI_READ_PORTS 1
#define L2_512K_MOESI_LINE_SIZE 64
#define L2_512K_MOESI_SIZE 512K
#define L2_512K_MOESI_SETS 2048

typedef CacheLines<L2_512K_MOESI_SETS, L2_512K_MOESI_ASSOC, L2_512K_MOESI_LINE_SIZE, L2_512K_MOESI_LATENCY> L2_512K_MOESI_CacheLines;

#define L3_2M_TAG_LATENCY 2
#define L3_2M_LATENCY 7
#define L3_2M_WRITE_PORTS 1
#define L3_2M_ASSOC 16
#define L3_2M_READ_PORTS 1
#define L3_2M_LINE_SIZE 64
#define L3_2M_SIZE 2M
#define L3_2M_SETS 2048

typedef CacheLines<L3_2M_SETS, L3_2M_ASSOC, L3_2M_LINE_SIZE, L3_2M_LATENCY> L3_2M_CacheLines;

#define L1_128K_TAG_LATENCY 2
#define L1_128K_LATENCY 2
#define L1_128K_WRITE_PORTS 2
#define L1_128K_ASSOC 8
#define L1_128K_READ_PORTS 2
#define L1_128K_LINE_SIZE 64
#define L1_128K_SIZE 128K
#define L1_128K_SETS 256

typedef CacheLines<L1_128K_SETS, L1_128K_ASSOC, L1_128K_LINE_SIZE, L1_128K_LATENCY> L1_128K_CacheLines;

#define L3_32M_MESI_TAG_LATENCY 2
#define L3_32M_MESI_LATENCY 7
#define L3_32M_MESI_WRITE_PORTS 1
#define L3_32M_MESI_ASSOC 20
#define L3_32M_MESI_READ_PORTS 1
#define L3_32M_MESI_LINE_SIZE 64
#define L3_32M_MESI_SIZE 32M
#define L3_32M_MESI_SETS 26214

typedef CacheLines<L3_32M_MESI_SETS, L3_32M_MESI_ASSOC, L3_32M_MESI_LINE_SIZE, L3_32M_MESI_LATENCY> L3_32M_MESI_CacheLines;

#define L1_32K_MOESI_TAG_LATENCY 2
#define L1_32K_MOESI_LATENCY 2
#define L1_32K_MOESI_WRITE_PORTS 2
#define L1_32K_MOESI_ASSOC 2
#define L1_32K_MOESI_READ_PORTS 2
#define L1_32K_MOESI_LINE_SIZE 64
#define L1_32K_MOESI_SIZE 32K
#define L1_32K_MOESI_SETS 256

typedef CacheLines<L1_32K_MOESI_SETS, L1_32K_MOESI_ASSOC, L1_32K_MOESI_LINE_SIZE, L1_32K_MOESI_LATENCY> L1_32K_MOESI_CacheLines;

#define L3_32M_TAG_LATENCY 2
#define L3_32M_LATENCY 7
#define L3_32M_WRITE_PORTS 1
#define L3_32M_ASSOC 20
#define L3_32M_READ_PORTS 1
#define L3_32M_LINE_SIZE 64
#define L3_32M_SIZE 32M
#define L3_32M_SETS 26214

typedef CacheLines<L3_32M_SETS, L3_32M_ASSOC, L3_32M_LINE_SIZE, L3_32M_LATENCY> L3_32M_CacheLines;

#define L3_32M_WT_TAG_LATENCY 2
#define L3_32M_WT_LATENCY 7
#define L3_32M_WT_WRITE_PORTS 1
#define L3_32M_WT_ASSOC 20
#define L3_32M_WT_READ_PORTS 1
#define L3_32M_WT_LINE_SIZE 64
#define L3_32M_WT_SIZE 32M
#define L3_32M_WT_SETS 26214

typedef CacheLines<L3_32M_WT_SETS, L3_32M_WT_ASSOC, L3_32M_WT_LINE_SIZE, L3_32M_WT_LATENCY> L3_32M_WT_CacheLines;

#define L1_32K_MESI_TAG_LATENCY 2
#define L1_32K_MESI_LATENCY 2
#define L1_32K_MESI_WRITE_PORTS 2
#define L1_32K_MESI_ASSOC 2
#define L1_32K_MESI_READ_PORTS 2
#define L1_32K_MESI_LINE_SIZE 64
#define L1_32K_MESI_SIZE 32K
#define L1_32K_MESI_SETS 256

typedef CacheLines<L1_32K_MESI_SETS, L1_32K_MESI_ASSOC, L1_32K_MESI_LINE_SIZE, L1_32K_MESI_LATENCY> L1_32K_MESI_CacheLines;

#define L1_128K_WT_TAG_LATENCY 2
#define L1_128K_WT_LATENCY 2
#define L1_128K_WT_WRITE_PORTS 2
#define L1_128K_WT_ASSOC 8
#define L1_128K_WT_READ_PORTS 2
#define L1_128K_WT_LINE_SIZE 64
#define L1_128K_WT_SIZE 128K
#define L1_128K_WT_SETS 256

typedef CacheLines<L1_128K_WT_SETS, L1_128K_WT_ASSOC, L1_128K_WT_LINE_SIZE, L1_128K_WT_LATENCY> L1_128K_WT_CacheLines;

#define L1_128K_MOESI_TAG_LATENCY 2
#define L1_128K_MOESI_LATENCY 2
#define L1_128K_MOESI_WRITE_PORTS 2
#define L1_128K_MOESI_ASSOC 8
#define L1_128K_MOESI_READ_PORTS 2
#define L1_128K_MOESI_LINE_SIZE 64
#define L1_128K_MOESI_SIZE 128K
#define L1_128K_MOESI_SETS 256

typedef CacheLines<L1_128K_MOESI_SETS, L1_128K_MOESI_ASSOC, L1_128K_MOESI_LINE_SIZE, L1_128K_MOESI_LATENCY> L1_128K_MOESI_CacheLines;


CacheLinesBase* get_cachelines(int cache_type)
{
	switch(cache_type) {

        case L2_2M_MESI:
            return new L2_2M_MESI_CacheLines(L2_2M_MESI_READ_PORTS, L2_2M_MESI_WRITE_PORTS);

        case L2_256K_MESI:
            return new L2_256K_MESI_CacheLines(L2_256K_MESI_READ_PORTS, L2_256K_MESI_WRITE_PORTS);

        case L2_2M:
            return new L2_2M_CacheLines(L2_2M_READ_PORTS, L2_2M_WRITE_PORTS);

        case L2_2M_WT:
            return new L2_2M_WT_CacheLines(L2_2M_WT_READ_PORTS, L2_2M_WT_WRITE_PORTS);

        case L2_2M_MOESI:
            return new L2_2M_MOESI_CacheLines(L2_2M_MOESI_READ_PORTS, L2_2M_MOESI_WRITE_PORTS);

        case L1_128K_MESI:
            return new L1_128K_MESI_CacheLines(L1_128K_MESI_READ_PORTS, L1_128K_MESI_WRITE_PORTS);

        case L1_256K:
            return new L1_256K_CacheLines(L1_256K_READ_PORTS, L1_256K_WRITE_PORTS);

        case L3_1M:
            return new L3_1M_CacheLines(L3_1M_READ_PORTS, L3_1M_WRITE_PORTS);

        case L2_1M_MOESI:
            return new L2_1M_MOESI_CacheLines(L2_1M_MOESI_READ_PORTS, L2_1M_MOESI_WRITE_PORTS);

        case L2_512K_MOESI:
            return new L2_512K_MOESI_CacheLines(L2_512K_MOESI_READ_PORTS, L2_512K_MOESI_WRITE_PORTS);

        case L3_2M:
            return new L3_2M_CacheLines(L3_2M_READ_PORTS, L3_2M_WRITE_PORTS);

        case L1_128K:
            return new L1_128K_CacheLines(L1_128K_READ_PORTS, L1_128K_WRITE_PORTS);

        case L3_32M_MESI:
            return new L3_32M_MESI_CacheLines(L3_32M_MESI_READ_PORTS, L3_32M_MESI_WRITE_PORTS);

        case L1_32K_MOESI:
            return new L1_32K_MOESI_CacheLines(L1_32K_MOESI_READ_PORTS, L1_32K_MOESI_WRITE_PORTS);

        case L3_32M:
            return new L3_32M_CacheLines(L3_32M_READ_PORTS, L3_32M_WRITE_PORTS);

        case L3_32M_WT:
            return new L3_32M_WT_CacheLines(L3_32M_WT_READ_PORTS, L3_32M_WT_WRITE_PORTS);

        case L1_32K_MESI:
            return new L1_32K_MESI_CacheLines(L1_32K_MESI_READ_PORTS, L1_32K_MESI_WRITE_PORTS);

        case L1_128K_WT:
            return new L1_128K_WT_CacheLines(L1_128K_WT_READ_PORTS, L1_128K_WT_WRITE_PORTS);

        case L1_128K_MOESI:
            return new L1_128K_MOESI_CacheLines(L1_128K_MOESI_READ_PORTS, L1_128K_MOESI_WRITE_PORTS);
		default: assert(0);
	}
}
};
